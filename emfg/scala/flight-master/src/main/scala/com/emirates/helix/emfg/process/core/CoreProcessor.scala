/*----------------------------------------------------------------------------
 * Created on  : 01/04/2018
 * Author      : Fayaz Shaik(S796466)
 * Email       : fayazbasha.shaik@dnata.com
 * Version     : 1.0
 * Project     : Helix-OpsEfficnecy
 * Filename    : CoreMasterProcessor.scala
 * Description : Secondary class file for processing Core Master data.
 * ---------------------------------------------------------------------------
 */
package com.emirates.helix.emfg.process.core

import com.emirates.helix.emfg.FlightMasterArguments.Args
import com.emirates.helix.emfg.common.FlightMasterUtils
import org.apache.log4j.Logger
import org.apache.spark.sql.DataFrame
import org.apache.spark.sql.hive.HiveContext

/**
  * Companion object for CoreProcessor class
  */
object CoreProcessor {

  def apply(args: Args): CoreProcessor = {
    val processor = new CoreProcessor()
    processor.args = args
    processor
  }
}

/**
  * CORE data processing for Flight Master
  */

class CoreProcessor extends FlightMasterUtils {

  @transient lazy val log: Logger = org.apache.log4j.LogManager.getLogger("CoreProcessor")
  private var args: Args = _

  def generateCOREDataForFM(core_final_input_df: DataFrame, aircraft_country_region_df: DataFrame, flight_service_df: DataFrame, flight_status_master_df: DataFrame, flight_delay_master_df: DataFrame, aircraft_details_master_df: DataFrame, numberOfPartition: Integer)(implicit sqlContext: HiveContext): DataFrame = {
    log.info("Generating CORE data for Flight Master - Invoked CoreProcessor.generateCOREDataForFM method")

    core_final_input_df.registerTempTable("core_dedup_df_tab")

    val core_simple_cols_df = sqlContext.sql("select  concat(airline_code,flight_number,case when flight_suffix is null  or flight_suffix = 'null' then '' else flight_suffix end, flight_date,pln_dep_iata_station,pln_arr_iata_station,flight_dep_number) as flight_identifier , flight_number,flight_date,pln_dep_iata_station,pln_arr_iata_station,airline_code,actual_reg_number,latest_pln_arr_iata_station,act_dep_iata_station,act_arr_iata_station , case when sch_dep_datetime is null then null      else from_unixtime(unix_timestamp(translate(substr(sch_dep_datetime,1,19), 'T', ' ') , 'yyyy-MM-dd HH:mm:ss') - (((cast(substr(sch_dep_datetime,20,3) as int)*60)*60 )+(cast(substr(sch_dep_datetime,24,2) as int)*60)))  end as sch_dep_datetime_utc  ,case when sch_dep_datetime is null then null      else translate(substr(sch_dep_datetime,1,19), 'T', ' ')  end as sch_dep_datetime_local  ,case when sch_arr_datetime is null then null      else from_unixtime(unix_timestamp(translate(substr(sch_arr_datetime,1,19), 'T', ' ') , 'yyyy-MM-dd HH:mm:ss') - (((cast(substr(sch_arr_datetime,20,3) as int)*60)*60 )+(cast(substr(sch_arr_datetime,24,2) as int)*60)))  end as sch_arr_datetime_utc  ,case when sch_arr_datetime is null then null      else translate(substr(sch_arr_datetime,1,19), 'T', ' ')  end as sch_arr_datetime_local  ,case when act_dep_datetime is null then null      else from_unixtime(unix_timestamp(translate(substr(act_dep_datetime,1,19), 'T', ' ') , 'yyyy-MM-dd HH:mm:ss') - (((cast(substr(act_dep_datetime,20,3) as int)*60)*60 )+(cast(substr(act_dep_datetime,24,2) as int)*60)))  end as act_dep_datetime_utc  ,case when act_dep_datetime is null then null      else translate(substr(act_dep_datetime,1,19), 'T', ' ')  end as act_dep_datetime_local  ,case when act_arr_datetime is null then null      else from_unixtime(unix_timestamp(translate(substr(act_arr_datetime,1,19), 'T', ' ') , 'yyyy-MM-dd HH:mm:ss') - (((cast(substr(act_arr_datetime,20,3) as int)*60)*60 )+(cast(substr(act_arr_datetime,24,2) as int)*60)))  end as act_arr_datetime_utc  ,case when act_arr_datetime is null then null      else translate(substr(act_arr_datetime,1,19), 'T', ' ')  end as act_arr_datetime_local  , flight_service_type , airline_name , airline_country_name , flight_suffix , flight_leg_number , flight_dep_number  ,case when flight_cabin_door_closure_date is null then null      else translate(substr(flight_cabin_door_closure_date,1,19), 'T', ' ')  end as flight_cabin_door_closure_date_local  ,case when flight_cargo_door_closure_date is null then null      else translate(substr(flight_cargo_door_closure_date,1,19), 'T', ' ')  end as flight_cargo_door_closure_date_local  , flight_blocktime_orig , flight_blocktime_act  ,case                 when act_flight_out_datetime is null then null                 else from_unixtime(unix_timestamp(translate(substr(act_flight_out_datetime,1,19), 'T', ' ') , 'yyyy-MM-dd HH:mm:ss') - (((cast(substr(act_flight_out_datetime,20,3) as int)*60)*60 )+(cast(substr(act_flight_out_datetime,24,2) as int)*60))) end as act_flight_out_datetime_utc  ,case                 when act_flight_out_datetime is null then null                 else translate(substr(act_flight_out_datetime,1,19), 'T', ' ') end as act_flight_out_datetime_local  ,case                 when act_flight_off_datetime is null then null                 else from_unixtime(unix_timestamp(translate(substr(act_flight_off_datetime,1,19), 'T', ' ') , 'yyyy-MM-dd HH:mm:ss') - (((cast(substr(act_flight_off_datetime,20,3) as int)*60)*60 )+(cast(substr(act_flight_off_datetime,24,2) as int)*60))) end as act_flight_off_datetime_utc  ,case                 when act_flight_off_datetime is null then null                 else translate(substr(act_flight_off_datetime,1,19), 'T', ' ') end as act_flight_off_datetime_local  ,case                 when act_flight_in_datetime is null then null                 else from_unixtime(unix_timestamp(translate(substr(act_flight_in_datetime,1,19), 'T', ' ') , 'yyyy-MM-dd HH:mm:ss') - (((cast(substr(act_flight_in_datetime,20,3) as int)*60)*60 )+(cast(substr(act_flight_in_datetime,24,2) as int)*60))) end as act_flight_in_datetime_utc  ,case                 when act_flight_in_datetime is null then null                 else translate(substr(act_flight_in_datetime,1,19), 'T', ' ') end as act_flight_in_datetime_local  ,case                 when act_flight_on_datetime is null then null                 else from_unixtime(unix_timestamp(translate(substr(act_flight_on_datetime,1,19), 'T', ' ') , 'yyyy-MM-dd HH:mm:ss') - (((cast(substr(act_flight_on_datetime,20,3) as int)*60)*60 )+(cast(substr(act_flight_on_datetime,24,2) as int)*60))) end as act_flight_on_datetime_utc  ,case                 when act_flight_on_datetime is null then null                 else translate(substr(act_flight_on_datetime,1,19), 'T', ' ') end as act_flight_on_datetime_local, aircraft_owner, aircraft_subtype, aircraft_version, taxi_in, taxi_out  from  (select   trim(Audit.TransDateTime) as TransDateTime  , LPAD(trim(FlightId.FltNum),4,'0') as flight_number  , trim(FlightId.FltDate.`_ATTRIBUTE_VALUE`) as flight_date  , trim(FlightId.DepStn) as pln_dep_iata_station  , trim(initial_pln_arr_iata_station) as pln_arr_iata_station  , trim(FlightId.CxCd) as airline_code  , trim(Events[0].TailNo.`_ATTRIBUTE_VALUE`) as actual_reg_number  ,latest_pln_arr_iata_station,  trim(Events[0].DepStn) as act_dep_iata_station  , trim(Events[0].ArrStn) as act_arr_iata_station  , case when trim(Events[0].SchdDateTime[0].`_TYPE`) = 'Departure' and trim(Events[0].SchdDateTime[0].`_ATTRIBUTE_VALUE`) is not null then trim(Events[0].SchdDateTime[0].`_ATTRIBUTE_VALUE`) when trim(Events[0].SchdDateTime[1].`_TYPE`) = 'Departure' and trim(Events[0].SchdDateTime[1].`_ATTRIBUTE_VALUE`) is not null then trim(Events[0].SchdDateTime[1].`_ATTRIBUTE_VALUE`) end as sch_dep_datetime, case when trim(Events[0].SchdDateTime[0].`_TYPE`) = 'Arrival' and trim(Events[0].SchdDateTime[0].`_ATTRIBUTE_VALUE`) is not null then trim(Events[0].SchdDateTime[0].`_ATTRIBUTE_VALUE`) when trim(Events[0].SchdDateTime[1].`_TYPE`) = 'Arrival' and trim(Events[0].SchdDateTime[1].`_ATTRIBUTE_VALUE`) is not null then trim(Events[0].SchdDateTime[1].`_ATTRIBUTE_VALUE`) end as sch_arr_datetime  , case       when trim(Events[0].MvtDateTime[0].`_TYPE`) is null then null      when trim(Events[0].MvtDateTime[0].`_TYPE`) = 'OffBlocksAct' then Events[0].MvtDateTime[0].`_ATTRIBUTE_VALUE`  	when trim(Events[0].MvtDateTime[1].`_TYPE`) = 'OffBlocksAct' then Events[0].MvtDateTime[1].`_ATTRIBUTE_VALUE`  	when trim(Events[0].MvtDateTime[2].`_TYPE`) = 'OffBlocksAct' then Events[0].MvtDateTime[2].`_ATTRIBUTE_VALUE`  	when trim(Events[0].MvtDateTime[3].`_TYPE`) = 'OffBlocksAct' then Events[0].MvtDateTime[3].`_ATTRIBUTE_VALUE`  	when trim(Events[0].MvtDateTime[4].`_TYPE`) = 'OffBlocksAct' then Events[0].MvtDateTime[4].`_ATTRIBUTE_VALUE`  	when trim(Events[0].MvtDateTime[5].`_TYPE`) = 'OffBlocksAct' then Events[0].MvtDateTime[5].`_ATTRIBUTE_VALUE`  	when trim(Events[0].MvtDateTime[6].`_TYPE`) = 'OffBlocksAct' then Events[0].MvtDateTime[6].`_ATTRIBUTE_VALUE`  	when trim(Events[0].MvtDateTime[7].`_TYPE`) = 'OffBlocksAct' then Events[0].MvtDateTime[7].`_ATTRIBUTE_VALUE`  	when trim(Events[0].MvtDateTime[8].`_TYPE`) = 'OffBlocksAct' then Events[0].MvtDateTime[8].`_ATTRIBUTE_VALUE`  	else null   end as act_dep_datetime  , case     when trim(Events[0].MvtDateTime[0].`_TYPE`) is null then null   when trim(Events[0].MvtDateTime[0].`_TYPE`) = 'OnBlocksAct' then Events[0].MvtDateTime[0].`_ATTRIBUTE_VALUE`     when trim(Events[0].MvtDateTime[1].`_TYPE`) = 'OnBlocksAct' then Events[0].MvtDateTime[1].`_ATTRIBUTE_VALUE`     when trim(Events[0].MvtDateTime[2].`_TYPE`) = 'OnBlocksAct' then Events[0].MvtDateTime[2].`_ATTRIBUTE_VALUE`     when trim(Events[0].MvtDateTime[3].`_TYPE`) = 'OnBlocksAct' then Events[0].MvtDateTime[3].`_ATTRIBUTE_VALUE`     when trim(Events[0].MvtDateTime[4].`_TYPE`) = 'OnBlocksAct' then Events[0].MvtDateTime[4].`_ATTRIBUTE_VALUE`     when trim(Events[0].MvtDateTime[5].`_TYPE`) = 'OnBlocksAct' then Events[0].MvtDateTime[5].`_ATTRIBUTE_VALUE`     when trim(Events[0].MvtDateTime[6].`_TYPE`) = 'OnBlocksAct' then Events[0].MvtDateTime[6].`_ATTRIBUTE_VALUE`     when trim(Events[0].MvtDateTime[7].`_TYPE`) = 'OnBlocksAct' then Events[0].MvtDateTime[7].`_ATTRIBUTE_VALUE`     when trim(Events[0].MvtDateTime[8].`_TYPE`) = 'OnBlocksAct' then Events[0].MvtDateTime[8].`_ATTRIBUTE_VALUE`     end as act_arr_datetime , Events[0].ServiceType as flight_service_type  , case when trim(FlightId.CxCd) = 'EK' then 'Emirates Airline' else null end as airline_name  , case when trim(FlightId.CxCd) = 'EK' then 'UAE' else null end as airline_country_name  , case when trim(FlightId.FltSuffix) is null then null else trim(FlightId.FltSuffix) end as flight_suffix  , case when trim(FlightId.LegNum) is null then null else trim(FlightId.LegNum) end as flight_leg_number  , case when trim(FlightId.DepNum) is null then null else trim(FlightId.DepNum) end as flight_dep_number  , case when trim(Events[0].CABIN_DOOR_CLOSURE) is null then null else trim(Events[0].CABIN_DOOR_CLOSURE) end as flight_cabin_door_closure_date  , case when trim(Events[0].CARGO_DOOR_CLOSURE) is null then null else trim(Events[0].CARGO_DOOR_CLOSURE) end as flight_cargo_door_closure_date  , case when trim(Events[0].BlkTimeOrig) is null then null else trim(Events[0].BlkTimeOrig) end as flight_blocktime_orig  , case when trim(Events[0].BlkTimeAct) is null then null else trim(Events[0].BlkTimeAct) end as flight_blocktime_act , case      when trim(Events[0].MvtDateTime[0].`_TYPE`) is null then null                 when trim(Events[0].MvtDateTime[0].`_TYPE`) = 'OffBlocksAct' then Events[0].MvtDateTime[0].`_ATTRIBUTE_VALUE`      when trim(Events[0].MvtDateTime[1].`_TYPE`) = 'OffBlocksAct' then Events[0].MvtDateTime[1].`_ATTRIBUTE_VALUE`      when trim(Events[0].MvtDateTime[2].`_TYPE`) = 'OffBlocksAct' then Events[0].MvtDateTime[2].`_ATTRIBUTE_VALUE`      when trim(Events[0].MvtDateTime[3].`_TYPE`) = 'OffBlocksAct' then Events[0].MvtDateTime[3].`_ATTRIBUTE_VALUE`      when trim(Events[0].MvtDateTime[4].`_TYPE`) = 'OffBlocksAct' then Events[0].MvtDateTime[4].`_ATTRIBUTE_VALUE`      when trim(Events[0].MvtDateTime[5].`_TYPE`) = 'OffBlocksAct' then Events[0].MvtDateTime[5].`_ATTRIBUTE_VALUE`      when trim(Events[0].MvtDateTime[6].`_TYPE`) = 'OffBlocksAct' then Events[0].MvtDateTime[6].`_ATTRIBUTE_VALUE`      when trim(Events[0].MvtDateTime[7].`_TYPE`) = 'OffBlocksAct' then Events[0].MvtDateTime[7].`_ATTRIBUTE_VALUE`      when trim(Events[0].MvtDateTime[8].`_TYPE`) = 'OffBlocksAct' then Events[0].MvtDateTime[8].`_ATTRIBUTE_VALUE` end as act_flight_out_datetime , case      when trim(Events[0].MvtDateTime[0].`_TYPE`) is null then null                 when trim(Events[0].MvtDateTime[0].`_TYPE`) = 'AirborneAct' then Events[0].MvtDateTime[0].`_ATTRIBUTE_VALUE`      when trim(Events[0].MvtDateTime[1].`_TYPE`) = 'AirborneAct' then Events[0].MvtDateTime[1].`_ATTRIBUTE_VALUE`      when trim(Events[0].MvtDateTime[2].`_TYPE`) = 'AirborneAct' then Events[0].MvtDateTime[2].`_ATTRIBUTE_VALUE`      when trim(Events[0].MvtDateTime[3].`_TYPE`) = 'AirborneAct' then Events[0].MvtDateTime[3].`_ATTRIBUTE_VALUE`      when trim(Events[0].MvtDateTime[4].`_TYPE`) = 'AirborneAct' then Events[0].MvtDateTime[4].`_ATTRIBUTE_VALUE`      when trim(Events[0].MvtDateTime[5].`_TYPE`) = 'AirborneAct' then Events[0].MvtDateTime[5].`_ATTRIBUTE_VALUE`      when trim(Events[0].MvtDateTime[6].`_TYPE`) = 'AirborneAct' then Events[0].MvtDateTime[6].`_ATTRIBUTE_VALUE`      when trim(Events[0].MvtDateTime[7].`_TYPE`) = 'AirborneAct' then Events[0].MvtDateTime[7].`_ATTRIBUTE_VALUE`      when trim(Events[0].MvtDateTime[8].`_TYPE`) = 'AirborneAct' then Events[0].MvtDateTime[8].`_ATTRIBUTE_VALUE` end as act_flight_off_datetime , case      when trim(Events[0].MvtDateTime[0].`_TYPE`) is null then null                 when trim(Events[0].MvtDateTime[0].`_TYPE`) = 'OnBlocksAct' then Events[0].MvtDateTime[0].`_ATTRIBUTE_VALUE`      when trim(Events[0].MvtDateTime[1].`_TYPE`) = 'OnBlocksAct' then Events[0].MvtDateTime[1].`_ATTRIBUTE_VALUE`      when trim(Events[0].MvtDateTime[2].`_TYPE`) = 'OnBlocksAct' then Events[0].MvtDateTime[2].`_ATTRIBUTE_VALUE`      when trim(Events[0].MvtDateTime[3].`_TYPE`) = 'OnBlocksAct' then Events[0].MvtDateTime[3].`_ATTRIBUTE_VALUE`      when trim(Events[0].MvtDateTime[4].`_TYPE`) = 'OnBlocksAct' then Events[0].MvtDateTime[4].`_ATTRIBUTE_VALUE`      when trim(Events[0].MvtDateTime[5].`_TYPE`) = 'OnBlocksAct' then Events[0].MvtDateTime[5].`_ATTRIBUTE_VALUE`      when trim(Events[0].MvtDateTime[6].`_TYPE`) = 'OnBlocksAct' then Events[0].MvtDateTime[6].`_ATTRIBUTE_VALUE`      when trim(Events[0].MvtDateTime[7].`_TYPE`) = 'OnBlocksAct' then Events[0].MvtDateTime[7].`_ATTRIBUTE_VALUE`      when trim(Events[0].MvtDateTime[8].`_TYPE`) = 'OnBlocksAct' then Events[0].MvtDateTime[8].`_ATTRIBUTE_VALUE` end as act_flight_in_datetime , case      when trim(Events[0].MvtDateTime[0].`_TYPE`) is null then null                 when trim(Events[0].MvtDateTime[0].`_TYPE`) = 'LandedAct' then Events[0].MvtDateTime[0].`_ATTRIBUTE_VALUE`      when trim(Events[0].MvtDateTime[1].`_TYPE`) = 'LandedAct' then Events[0].MvtDateTime[1].`_ATTRIBUTE_VALUE`      when trim(Events[0].MvtDateTime[2].`_TYPE`) = 'LandedAct' then Events[0].MvtDateTime[2].`_ATTRIBUTE_VALUE`      when trim(Events[0].MvtDateTime[3].`_TYPE`) = 'LandedAct' then Events[0].MvtDateTime[3].`_ATTRIBUTE_VALUE`      when trim(Events[0].MvtDateTime[4].`_TYPE`) = 'LandedAct' then Events[0].MvtDateTime[4].`_ATTRIBUTE_VALUE`      when trim(Events[0].MvtDateTime[5].`_TYPE`) = 'LandedAct' then Events[0].MvtDateTime[5].`_ATTRIBUTE_VALUE`      when trim(Events[0].MvtDateTime[6].`_TYPE`) = 'LandedAct' then Events[0].MvtDateTime[6].`_ATTRIBUTE_VALUE`      when trim(Events[0].MvtDateTime[7].`_TYPE`) = 'LandedAct' then Events[0].MvtDateTime[7].`_ATTRIBUTE_VALUE`      when trim(Events[0].MvtDateTime[8].`_TYPE`) = 'LandedAct' then Events[0].MvtDateTime[8].`_ATTRIBUTE_VALUE` end as act_flight_on_datetime , trim(Events[0].AcOwner) as aircraft_owner, trim(Events[0].AcSubType) as aircraft_subtype, trim(Events[0].AcVersion) as aircraft_version, trim(Events[0].TaxiIn) as taxi_in, trim(Events[0].TaxiOut) as taxi_out, ROW_NUMBER() over (partition by FlightId.FltNum, trim(FlightId.FltSuffix) , FlightId.FltDate.`_ATTRIBUTE_VALUE`, FlightId.DepStn, initial_pln_arr_iata_station, FlightId.CxCd, FlightId.DepNum order by trim(Audit.TransDateTime) desc,trim(tibco_messageTime) desc) as ranked  FROM core_dedup_df_tab where trim(`_ActionType`) <> 'Delete' ) A where ranked=1 ").repartition(numberOfPartition)

    core_simple_cols_df.dropDuplicates.registerTempTable("core_temp1_tab1")

    val core_temp1_df = sqlContext.sql("select * from core_temp1_tab1 where taxi_in is not null or taxi_out is not null or act_dep_datetime_utc is null or act_arr_datetime_utc is null or flight_blocktime_act <> '00000'")

    core_temp1_df.registerTempTable("core_temp1_tab")

    val core_temp2 = sqlContext.sql("select distinct  concat(airline_code,flight_number,case when flight_suffix is null  or flight_suffix = 'null' then '' else flight_suffix end, flight_date,pln_dep_iata_station,pln_arr_iata_station,flight_dep_number) as flight_identifier,  'Y' as flight_delete_ind from  (select   trim(Audit.TransDateTime) as TransDateTime  , LPAD(trim(FlightId.FltNum),4,'0') as flight_number  , trim(FlightId.FltDate.`_ATTRIBUTE_VALUE`) as flight_date  , trim(FlightId.DepStn) as pln_dep_iata_station  , trim(initial_pln_arr_iata_station) as pln_arr_iata_station  , trim(FlightId.CxCd) as airline_code  , trim(Events[0].TailNo.`_ATTRIBUTE_VALUE`) as actual_reg_number  , trim(Events[0].DepStn) as act_dep_iata_station  , trim(Events[0].ArrStn) as act_arr_iata_station,case when trim(FlightId.DepNum) is null then null else trim(FlightId.DepNum) end as flight_dep_number,case when trim(FlightId.FltSuffix) is null then null else trim(FlightId.FltSuffix) end as flight_suffix FROM core_dedup_df_tab where trim(`_ActionType`) = 'Delete' ) a ")
    core_temp2.dropDuplicates.registerTempTable("core_temp2_tab")

    val core_temp3 = sqlContext.sql("select s.*, case when t.flight_delete_ind is null then 'N' else 'Y' end as  flight_delete_ind from core_temp1_tab s left outer join core_temp2_tab t  on s.flight_identifier = t.flight_identifier")

    core_temp3.registerTempTable("core_temp3_tab")
    val core_temp4 = sqlContext.sql("select *, min(sch_dep_datetime_local) over (partition by flight_number, flight_date) as firstleg_final_sch_dep_datetime_local from core_temp3_tab")

    core_temp4.registerTempTable("core_simple_cols_df_tab")

    aircraft_country_region_df.registerTempTable("aircraft_country_region_df_tab")

    flight_service_df.registerTempTable("flight_service_df_tab")

    // generate one time master table columns to core
    val aircraft_details_core_df = sqlContext.sql("select flight_identifier,actual_reg_number, aircraft_owner, aircraft_subtype, aircraft_version as aircraft_version_code from core_simple_cols_df_tab")

    aircraft_details_core_df.registerTempTable("aircraft_details_core_df_tab")

    aircraft_details_master_df.registerTempTable("aircraft_details_df_tab1")

    val aircraft_details_df2 = sqlContext.sql("select trim(aircraft_reg_no) as aircraft_reg_no, case when substr(trim(aircraft_type),1,1) = 'A' then 'Airbus' when substr(trim(aircraft_type),1,1) = 'B' then 'Boeing' else 'Not Available' end as aircraft_mfr, trim(aircraft_type) as aircraft_type, case when cast(trim(aircraft_fc) as int) <> 0 and cast(trim(aircraft_bc) as int) <> 0 and cast(trim(aircraft_ey) as int) <> 0 then 'FJY' when cast(trim(aircraft_fc) as int) = 0 and cast(trim(aircraft_bc) as int) <> 0 and cast(trim(aircraft_ey) as int) <> 0 then 'JY' when cast(trim(aircraft_fc) as int) = 0 and cast(trim(aircraft_bc) as int) = 0 and cast(trim(aircraft_ey) as int) <> 0 then 'Y' when cast(trim(aircraft_fc) as int) = 0 and cast(trim(aircraft_bc) as int) = 0 and cast(trim(aircraft_ey) as int) = 0 then trim(category) end as aircraft_config,trim(aircraft_total) as aircraft_tot_capcity, trim(aircraft_fc) as aircraft_F_capacity, trim(aircraft_bc) as aircraft_J_capacity, trim(aircraft_ey) as aircraft_Y_capacity, NULL as aircraft_lease_ind, NULL as ETOPS_Ind,  'EK' as aircraft_owner, trim(potable_water_tank_count)  as potable_water_tank_count, trim(potable_water_tank_capacity_l) as potable_water_tank_capacity_l, trim(engine_count) as no_engines from aircraft_details_df_tab1")

    aircraft_details_df2.registerTempTable("aircraft_details_df_tab2")

    val aircraft_details_df = sqlContext.sql("select distinct s.flight_identifier, s.actual_reg_number,  s.aircraft_subtype, s.aircraft_version_code, t.* from  aircraft_details_core_df_tab s left outer join aircraft_details_df_tab2 t on  translate(trim(s.actual_reg_number),'-','') = translate(trim(t.aircraft_reg_no),'-','') ")

    val aircraft_details_df_temp = toMap(aircraft_details_df, COLUMNLIST_AIRCRAFT_DETAILS, "aircraft_details")

    aircraft_details_df_temp.registerTempTable("aircraft_details_df_temp_tab")

    val initial_sch_dep_arr_datetime_local_df = sqlContext.sql("select  concat(airline_code,flight_number,case when flight_suffix is null  or flight_suffix = 'null' then '' else flight_suffix end, flight_date,pln_dep_iata_station,pln_arr_iata_station,flight_dep_number) as flight_identifier ,case when sch_dep_datetime is null then null      else translate(substr(sch_dep_datetime,1,19), 'T', ' ')  end as initial_sch_dep_datetime_local  , case when sch_arr_datetime is null then null      else translate(substr(sch_arr_datetime,1,19), 'T', ' ')  end as initial_sch_arr_datetime_local  from  (select   trim(Audit.TransDateTime) as TransDateTime  , LPAD(trim(FlightId.FltNum),4,'0') as flight_number  , trim(FlightId.FltDate.`_ATTRIBUTE_VALUE`) as flight_date  , trim(FlightId.DepStn) as pln_dep_iata_station  , trim(initial_pln_arr_iata_station) as pln_arr_iata_station  , trim(FlightId.CxCd) as airline_code  , trim(Events[0].TailNo.`_ATTRIBUTE_VALUE`) as actual_reg_number  ,latest_pln_arr_iata_station,  trim(Events[0].DepStn) as act_dep_iata_station  , trim(Events[0].ArrStn) as act_arr_iata_station  , case when trim(Events[0].SchdDateTime[0].`_TYPE`) = 'Departure' and trim(Events[0].SchdDateTime[0].`_ATTRIBUTE_VALUE`) is not null then trim(Events[0].SchdDateTime[0].`_ATTRIBUTE_VALUE`) when trim(Events[0].SchdDateTime[1].`_TYPE`) = 'Departure' and trim(Events[0].SchdDateTime[1].`_ATTRIBUTE_VALUE`) is not null then trim(Events[0].SchdDateTime[1].`_ATTRIBUTE_VALUE`) end as sch_dep_datetime, case when trim(Events[0].SchdDateTime[0].`_TYPE`) = 'Arrival' and trim(Events[0].SchdDateTime[0].`_ATTRIBUTE_VALUE`) is not null then trim(Events[0].SchdDateTime[0].`_ATTRIBUTE_VALUE`) when trim(Events[0].SchdDateTime[1].`_TYPE`) = 'Arrival' and trim(Events[0].SchdDateTime[1].`_ATTRIBUTE_VALUE`) is not null then trim(Events[0].SchdDateTime[1].`_ATTRIBUTE_VALUE`) end as sch_arr_datetime  ,  case when trim(FlightId.FltSuffix) is null then null else trim(FlightId.FltSuffix) end as flight_suffix, case when trim(FlightId.DepNum) is null then null else trim(FlightId.DepNum) end as flight_dep_number, ROW_NUMBER() over (partition by FlightId.FltNum, FlightId.FltDate.`_ATTRIBUTE_VALUE`, FlightId.DepStn, initial_pln_arr_iata_station, FlightId.CxCd, FlightId.DepNum order by trim(Audit.TransDateTime) asc) as ranked  FROM core_dedup_df_tab where trim(`_ActionType`) <> 'Delete' ) A where ranked=1 ")

    initial_sch_dep_arr_datetime_local_df.registerTempTable("initial_sch_dep_arr_datetime_local_df_tab")

    val core_simple_cols_master_df = sqlContext.sql("select s6.*, t6.initial_sch_dep_datetime_local, t6.initial_sch_arr_datetime_local from (select s5.*, t5.aircraft_details from (select s4.*,  t4.DESCRIPTION as flight_service_desc from (select s3.*, t3.AIRPORT_ICAO_CODE as act_arr_icao_station from (select s2.*, t2.AIRPORT_ICAO_CODE as act_dep_icao_station from (select s1.*, t1.AIRPORT_ICAO_CODE as pln_arr_icao_station from (select s.*, t.AIRPORT_ICAO_CODE as pln_dep_icao_station from core_simple_cols_df_tab s left outer join  aircraft_country_region_df_tab t on s.pln_dep_iata_station = t.AIRPORT_IATA_CODE) s1 left outer join aircraft_country_region_df_tab t1 on s1.pln_arr_iata_station = t1.AIRPORT_IATA_CODE ) s2 left outer join aircraft_country_region_df_tab t2 on s2.act_dep_iata_station = t2.AIRPORT_IATA_CODE ) s3 left outer join aircraft_country_region_df_tab t3 on s3.act_arr_iata_station = t3.AIRPORT_IATA_CODE ) s4 left outer join flight_service_df_tab t4 on trim(s4.flight_service_type) = t4.SERVICE_TYPE) s5 left outer join aircraft_details_df_temp_tab t5 on s5.flight_identifier = t5.flight_identifier and s5.actual_reg_number = t5.actual_reg_number) s6 left outer join initial_sch_dep_arr_datetime_local_df_tab t6 on s6.flight_identifier = t6.flight_identifier")

    core_simple_cols_master_df.registerTempTable("core_simple_master_tab")

    // Building dataframe used for only complex columns

    val core_complex_cols_df = sqlContext.sql("select  concat(airline_code,flight_number,case when flight_suffix is null or flight_suffix = 'null' then '' else flight_suffix end,flight_date,pln_dep_iata_station,pln_arr_iata_station,flight_dep_number) as flight_identifier , pln_reg_number , flight_status , flight_si_remarks_dep , flight_si_remarks_arr , flight_remarks , DorRemark , est_flight_out_datetime , est_flight_off_datetime , est_flight_in_datetime , est_flight_on_datetime, TransDateTime, tibco_messageTime from   (select   trim(Audit.TransDateTime) as TransDateTime  ,  LPAD(trim(FlightId.FltNum),4,'0') as flight_number   ,  trim(FlightId.FltDate.`_ATTRIBUTE_VALUE`) as flight_date  ,  trim(FlightId.DepStn) as pln_dep_iata_station   ,  trim(initial_pln_arr_iata_station) as pln_arr_iata_station  ,  trim(Events[0].CxCd) as airline_code   , case when trim(FlightId.DepNum) is null then null else trim(FlightId.DepNum) end as flight_dep_number , translate(substr(trim(Audit.TransDateTime),1,19), 'T', ' ') as Audit_TransDateTime  , case when trim(Events[0].TailNo.`_ATTRIBUTE_VALUE`) is null then null else trim(Events[0].TailNo.`_ATTRIBUTE_VALUE`) end as pln_reg_number , case when trim(Events[0].FltStatus) is null then null   else trim(Events[0].FltStatus) end as flight_status , case when trim(Events[0].SiRemark[0].`_Type`) = 'Departure' then trim(Events[0].SiRemark[0].`_ATTRIBUTE_VALUE`)      when trim(Events[0].SiRemark[1].`_Type`) = 'Departure' then trim(Events[0].SiRemark[1].`_ATTRIBUTE_VALUE`) 	 else null  end as flight_si_remarks_dep , case when trim(Events[0].SiRemark[0].`_Type`) = 'Arrival' then trim(Events[0].SiRemark[0].`_ATTRIBUTE_VALUE`)       when trim(Events[0].SiRemark[1].`_Type`) = 'Arrival' then trim(Events[0].SiRemark[1].`_ATTRIBUTE_VALUE`)      else null end as flight_si_remarks_arr,  case when (size(Events[0].Remark) is null or Events[0].Remark[0] = 'null' or Events[0].Remark[0] is null or trim(Events[0].Remark[0]) = '') then 'null' else  concat_ws(',',Events[0].Remark) end as flight_remarks , case when trim(Events[0].DorRemark) is null then null        else trim(Events[0].DorRemark) end as DorRemark , case      when trim(Events[0].MvtDateTime[0].`_TYPE`) is null then null                 when trim(Events[0].MvtDateTime[0].`_TYPE`) = 'OffBlocksEst' then Events[0].MvtDateTime[0].`_ATTRIBUTE_VALUE`      when trim(Events[0].MvtDateTime[1].`_TYPE`) = 'OffBlocksEst' then Events[0].MvtDateTime[1].`_ATTRIBUTE_VALUE`      when trim(Events[0].MvtDateTime[2].`_TYPE`) = 'OffBlocksEst' then Events[0].MvtDateTime[2].`_ATTRIBUTE_VALUE`      when trim(Events[0].MvtDateTime[3].`_TYPE`) = 'OffBlocksEst' then Events[0].MvtDateTime[3].`_ATTRIBUTE_VALUE`      when trim(Events[0].MvtDateTime[4].`_TYPE`) = 'OffBlocksEst' then Events[0].MvtDateTime[4].`_ATTRIBUTE_VALUE`      when trim(Events[0].MvtDateTime[5].`_TYPE`) = 'OffBlocksEst' then Events[0].MvtDateTime[5].`_ATTRIBUTE_VALUE`      when trim(Events[0].MvtDateTime[6].`_TYPE`) = 'OffBlocksEst' then Events[0].MvtDateTime[6].`_ATTRIBUTE_VALUE`      when trim(Events[0].MvtDateTime[7].`_TYPE`) = 'OffBlocksEst' then Events[0].MvtDateTime[7].`_ATTRIBUTE_VALUE`      when trim(Events[0].MvtDateTime[8].`_TYPE`) = 'OffBlocksEst' then Events[0].MvtDateTime[8].`_ATTRIBUTE_VALUE` end as est_flight_out_datetime , case      when trim(Events[0].MvtDateTime[0].`_TYPE`) is null then null                 when trim(Events[0].MvtDateTime[0].`_TYPE`) = 'AirborneEst' then Events[0].MvtDateTime[0].`_ATTRIBUTE_VALUE`      when trim(Events[0].MvtDateTime[1].`_TYPE`) = 'AirborneEst' then Events[0].MvtDateTime[1].`_ATTRIBUTE_VALUE`      when trim(Events[0].MvtDateTime[2].`_TYPE`) = 'AirborneEst' then Events[0].MvtDateTime[2].`_ATTRIBUTE_VALUE`      when trim(Events[0].MvtDateTime[3].`_TYPE`) = 'AirborneEst' then Events[0].MvtDateTime[3].`_ATTRIBUTE_VALUE`      when trim(Events[0].MvtDateTime[4].`_TYPE`) = 'AirborneEst' then Events[0].MvtDateTime[4].`_ATTRIBUTE_VALUE`      when trim(Events[0].MvtDateTime[5].`_TYPE`) = 'AirborneEst' then Events[0].MvtDateTime[5].`_ATTRIBUTE_VALUE`      when trim(Events[0].MvtDateTime[6].`_TYPE`) = 'AirborneEst' then Events[0].MvtDateTime[6].`_ATTRIBUTE_VALUE`      when trim(Events[0].MvtDateTime[7].`_TYPE`) = 'AirborneEst' then Events[0].MvtDateTime[7].`_ATTRIBUTE_VALUE`      when trim(Events[0].MvtDateTime[8].`_TYPE`) = 'AirborneEst' then Events[0].MvtDateTime[8].`_ATTRIBUTE_VALUE` end as est_flight_off_datetime , case      when trim(Events[0].MvtDateTime[0].`_TYPE`) is null then null                 when trim(Events[0].MvtDateTime[0].`_TYPE`) = 'OnBlocksEst' then Events[0].MvtDateTime[0].`_ATTRIBUTE_VALUE`      when trim(Events[0].MvtDateTime[1].`_TYPE`) = 'OnBlocksEst' then Events[0].MvtDateTime[1].`_ATTRIBUTE_VALUE`      when trim(Events[0].MvtDateTime[2].`_TYPE`) = 'OnBlocksEst' then Events[0].MvtDateTime[2].`_ATTRIBUTE_VALUE`      when trim(Events[0].MvtDateTime[3].`_TYPE`) = 'OnBlocksEst' then Events[0].MvtDateTime[3].`_ATTRIBUTE_VALUE`      when trim(Events[0].MvtDateTime[4].`_TYPE`) = 'OnBlocksEst' then Events[0].MvtDateTime[4].`_ATTRIBUTE_VALUE`      when trim(Events[0].MvtDateTime[5].`_TYPE`) = 'OnBlocksEst' then Events[0].MvtDateTime[5].`_ATTRIBUTE_VALUE`      when trim(Events[0].MvtDateTime[6].`_TYPE`) = 'OnBlocksEst' then Events[0].MvtDateTime[6].`_ATTRIBUTE_VALUE`      when trim(Events[0].MvtDateTime[7].`_TYPE`) = 'OnBlocksEst' then Events[0].MvtDateTime[7].`_ATTRIBUTE_VALUE`      when trim(Events[0].MvtDateTime[8].`_TYPE`) = 'OnBlocksEst' then Events[0].MvtDateTime[8].`_ATTRIBUTE_VALUE` end as est_flight_in_datetime , case      when trim(Events[0].MvtDateTime[0].`_TYPE`) is null then null                 when trim(Events[0].MvtDateTime[0].`_TYPE`) = 'LandedEst' then Events[0].MvtDateTime[0].`_ATTRIBUTE_VALUE`      when trim(Events[0].MvtDateTime[1].`_TYPE`) = 'LandedEst' then Events[0].MvtDateTime[1].`_ATTRIBUTE_VALUE`      when trim(Events[0].MvtDateTime[2].`_TYPE`) = 'LandedEst' then Events[0].MvtDateTime[2].`_ATTRIBUTE_VALUE`      when trim(Events[0].MvtDateTime[3].`_TYPE`) = 'LandedEst' then Events[0].MvtDateTime[3].`_ATTRIBUTE_VALUE`      when trim(Events[0].MvtDateTime[4].`_TYPE`) = 'LandedEst' then Events[0].MvtDateTime[4].`_ATTRIBUTE_VALUE`      when trim(Events[0].MvtDateTime[5].`_TYPE`) = 'LandedEst' then Events[0].MvtDateTime[5].`_ATTRIBUTE_VALUE`      when trim(Events[0].MvtDateTime[6].`_TYPE`) = 'LandedEst' then Events[0].MvtDateTime[6].`_ATTRIBUTE_VALUE`      when trim(Events[0].MvtDateTime[7].`_TYPE`) = 'LandedEst' then Events[0].MvtDateTime[7].`_ATTRIBUTE_VALUE`      when trim(Events[0].MvtDateTime[8].`_TYPE`) = 'LandedEst' then Events[0].MvtDateTime[8].`_ATTRIBUTE_VALUE` end as est_flight_on_datetime, case when trim(FlightId.FltSuffix) is null then null else trim(FlightId.FltSuffix) end as flight_suffix, tibco_messageTime  FROM core_dedup_df_tab where trim(`_ActionType`) <> 'Delete') A ").repartition(numberOfPartition)

    core_complex_cols_df.dropDuplicates.registerTempTable("core_complex_cols_df_tab")

    // est_flight_out_datetime:

    val est_flight_out_datetime_temp1 = sqlContext.sql("select flight_identifier, est_flight_out_datetime_local, est_flight_out_datetime_utc, concat(msg_recorded_datetime,'.00',(ranked-1)) as msg_recorded_datetime from (select flight_identifier, est_flight_out_datetime_local, est_flight_out_datetime_utc, msg_recorded_datetime, tibco_messageTime, ROW_NUMBER() over(partition by flight_identifier, msg_recorded_datetime  order by tibco_messageTime) as ranked from (select *, lag(est_flight_out_datetime_local) over (partition by flight_identifier order by msg_recorded_datetime, tibco_messageTime) as prev_est, tibco_messageTime from (select flight_identifier, est_flight_out_datetime, case when est_flight_out_datetime is null or trim(est_flight_out_datetime) is null then null else translate(substr(est_flight_out_datetime,1,19), 'T', ' ') end as  est_flight_out_datetime_local, case when est_flight_out_datetime is null or trim(est_flight_out_datetime) is null then null else from_unixtime(unix_timestamp(translate(substr(est_flight_out_datetime,1,19), 'T', ' ') , 'yyyy-MM-dd HH:mm:ss') - (((cast(substr(est_flight_out_datetime,20,3) as int)*60)*60 )+(cast(substr(est_flight_out_datetime,24,2) as int)*60))) end as  est_flight_out_datetime_utc, translate(substr(trim(TransDateTime),1,19), 'T', ' ') as msg_recorded_datetime, TransDateTime, tibco_messageTime from (select flight_identifier, est_flight_out_datetime, TransDateTime, tibco_messageTime from core_complex_cols_df_tab where est_flight_out_datetime is not null ) A ) B where est_flight_out_datetime_local is not null ) C where prev_est is null or est_flight_out_datetime_local <> prev_est ) D ")

    val est_flight_out_datetime_temp2 = toMap(est_flight_out_datetime_temp1, COLUMNLIST_EST_FLIGHT_OUT_DATETIME, "est_flight_out_datetime")

    est_flight_out_datetime_temp2.registerTempTable("est_flight_out_datetime_tab")

    val est_flight_out_datetime_df = sqlContext.sql("select flight_identifier,collect_list(est_flight_out_datetime) as est_flight_out_datetime  from est_flight_out_datetime_tab group by flight_identifier").coalesce(numberOfPartition)

    est_flight_out_datetime_df.registerTempTable("est_flight_out_datetime_df_tab")


    // est_flight_off_datetime:

    val est_flight_off_datetime_temp1 = sqlContext.sql("select flight_identifier, est_flight_off_datetime_local, est_flight_off_datetime_utc, concat(msg_recorded_datetime,'.00',(ranked-1)) as msg_recorded_datetime from (select flight_identifier, est_flight_off_datetime_local, est_flight_off_datetime_utc, msg_recorded_datetime, tibco_messageTime, ROW_NUMBER() over(partition by flight_identifier, msg_recorded_datetime order by tibco_messageTime) as ranked from (select *, lag(est_flight_off_datetime_local) over (partition by flight_identifier order by msg_recorded_datetime, tibco_messageTime) as prev_est, tibco_messageTime from (select flight_identifier, est_flight_off_datetime, case when est_flight_off_datetime is null or trim(est_flight_off_datetime) is null then null else translate(substr(est_flight_off_datetime,1,19), 'T', ' ') end as  est_flight_off_datetime_local, case when est_flight_off_datetime is null or trim(est_flight_off_datetime) is null then null else from_unixtime(unix_timestamp(translate(substr(est_flight_off_datetime,1,19), 'T', ' ') , 'yyyy-MM-dd HH:mm:ss') - (((cast(substr(est_flight_off_datetime,20,3) as int)*60)*60 )+(cast(substr(est_flight_off_datetime,24,2) as int)*60))) end as  est_flight_off_datetime_utc, translate(substr(trim(TransDateTime),1,19), 'T', ' ') as msg_recorded_datetime, TransDateTime, tibco_messageTime from (select flight_identifier, est_flight_off_datetime, TransDateTime, tibco_messageTime from core_complex_cols_df_tab where est_flight_off_datetime is not null ) A ) B where est_flight_off_datetime_local is not null ) C where prev_est is null or est_flight_off_datetime_local <> prev_est ) D ")

    val est_flight_off_datetime_temp2 = toMap(est_flight_off_datetime_temp1, COLUMNLIST_EST_FLIGHT_OFF_DATETIME, "est_flight_off_datetime")

    est_flight_off_datetime_temp2.registerTempTable("est_flight_off_datetime_tab")

    val est_flight_off_datetime_df = sqlContext.sql("select flight_identifier,collect_list(est_flight_off_datetime) as est_flight_off_datetime  from est_flight_off_datetime_tab group by flight_identifier").coalesce(numberOfPartition)

    est_flight_off_datetime_df.registerTempTable("est_flight_off_datetime_df_tab")

    // est_flight_in_datetime:

    val est_flight_in_datetime_temp1 = sqlContext.sql("select flight_identifier, est_flight_in_datetime_local, est_flight_in_datetime_utc, concat(msg_recorded_datetime,'.00',(ranked-1)) as msg_recorded_datetime from (select flight_identifier, est_flight_in_datetime_local, est_flight_in_datetime_utc, msg_recorded_datetime, tibco_messageTime, ROW_NUMBER() over(partition by flight_identifier, msg_recorded_datetime order by tibco_messageTime) as ranked from (select *, lag(est_flight_in_datetime_local) over (partition by flight_identifier order by msg_recorded_datetime, tibco_messageTime) as prev_est, tibco_messageTime from (select flight_identifier, est_flight_in_datetime, case when est_flight_in_datetime is null or trim(est_flight_in_datetime) is null then null else translate(substr(est_flight_in_datetime,1,19), 'T', ' ') end as  est_flight_in_datetime_local, case when est_flight_in_datetime is null or trim(est_flight_in_datetime) is null then null else from_unixtime(unix_timestamp(translate(substr(est_flight_in_datetime,1,19), 'T', ' ') , 'yyyy-MM-dd HH:mm:ss') - (((cast(substr(est_flight_in_datetime,20,3) as int)*60)*60 )+(cast(substr(est_flight_in_datetime,24,2) as int)*60))) end as  est_flight_in_datetime_utc, translate(substr(trim(TransDateTime),1,19), 'T', ' ') as msg_recorded_datetime, TransDateTime, tibco_messageTime from (select flight_identifier, est_flight_in_datetime, TransDateTime, tibco_messageTime from core_complex_cols_df_tab where est_flight_in_datetime is not null ) A ) B where est_flight_in_datetime_local is not null ) C where prev_est is null or est_flight_in_datetime_local <> prev_est ) D ")

    val est_flight_in_datetime_temp2 = toMap(est_flight_in_datetime_temp1, COLUMNLIST_EST_FLIGHT_IN_DATETIME, "est_flight_in_datetime")

    est_flight_in_datetime_temp2.registerTempTable("est_flight_in_datetime_tab")

    val est_flight_in_datetime_df = sqlContext.sql("select flight_identifier,collect_list(est_flight_in_datetime) as est_flight_in_datetime  from est_flight_in_datetime_tab group by flight_identifier").coalesce(numberOfPartition)

    est_flight_in_datetime_df.registerTempTable("est_flight_in_datetime_df_tab")

    // est_flight_on_datetime:

    val est_flight_on_datetime_temp1 = sqlContext.sql("select flight_identifier, est_flight_on_datetime_local, est_flight_on_datetime_utc, concat(msg_recorded_datetime,'.00',(ranked-1)) as msg_recorded_datetime from (select flight_identifier, est_flight_on_datetime_local, est_flight_on_datetime_utc, msg_recorded_datetime, tibco_messageTime, ROW_NUMBER() over(partition by flight_identifier, msg_recorded_datetime order by tibco_messageTime) as ranked from (select *, lag(est_flight_on_datetime_local) over (partition by flight_identifier order by msg_recorded_datetime, tibco_messageTime) as prev_est, tibco_messageTime from (select flight_identifier, est_flight_on_datetime, case when est_flight_on_datetime is null or trim(est_flight_on_datetime) is null then null else translate(substr(est_flight_on_datetime,1,19), 'T', ' ') end as  est_flight_on_datetime_local, case when est_flight_on_datetime is null or trim(est_flight_on_datetime) is null then null else from_unixtime(unix_timestamp(translate(substr(est_flight_on_datetime,1,19), 'T', ' ') , 'yyyy-MM-dd HH:mm:ss') - (((cast(substr(est_flight_on_datetime,20,3) as int)*60)*60 )+(cast(substr(est_flight_on_datetime,24,2) as int)*60))) end as  est_flight_on_datetime_utc, translate(substr(trim(TransDateTime),1,19), 'T', ' ') as msg_recorded_datetime, TransDateTime, tibco_messageTime from (select flight_identifier, est_flight_on_datetime, TransDateTime, tibco_messageTime from core_complex_cols_df_tab where est_flight_on_datetime is not null ) A ) B where est_flight_on_datetime_local is not null ) C where prev_est is null or est_flight_on_datetime_local <> prev_est ) D ")

    val est_flight_on_datetime_temp2 = toMap(est_flight_on_datetime_temp1, COLUMNLIST_EST_FLIGHT_ON_DATETIME, "est_flight_on_datetime")

    est_flight_on_datetime_temp2.registerTempTable("est_flight_on_datetime_tab")

    val est_flight_on_datetime_df = sqlContext.sql("select flight_identifier,collect_list(est_flight_on_datetime) as est_flight_on_datetime  from est_flight_on_datetime_tab group by flight_identifier").coalesce(numberOfPartition)

    est_flight_on_datetime_df.registerTempTable("est_flight_on_datetime_df_tab")

    // -- flight_status_details:

    flight_status_master_df.registerTempTable("flight_status_master_df_tab")

    //updated
    val flight_status_df_temp1 = sqlContext.sql(" select flight_identifier, flight_status, concat(msg_recorded_datetime,'.00',(ranked-1)) as msg_recorded_datetime from (select flight_identifier, flight_status, msg_recorded_datetime, tibco_messageTime, ROW_NUMBER() over(partition by flight_identifier, msg_recorded_datetime order by tibco_messageTime) as ranked from (select flight_identifier, flight_status, lag(flight_status) over (partition by flight_identifier order by msg_recorded_datetime, tibco_messageTime) as prev_status, msg_recorded_datetime, tibco_messageTime from (select flight_identifier, flight_status, translate(substr(trim(TransDateTime),1,19), 'T', ' ') as  msg_recorded_datetime, tibco_messageTime from core_complex_cols_df_tab where flight_status is not null ) A ) B where flight_status <> prev_status or prev_status is null ) C ")

    flight_status_df_temp1.registerTempTable("flight_status_df_temp1_tab")

    val flight_status_df_temp2 = sqlContext.sql("select flight_identifier, flight_status, trim(Status_Description) as flight_status_desc, msg_recorded_datetime from flight_status_df_temp1_tab s join flight_status_master_df_tab t on s.flight_status=t.Status_Code").coalesce(numberOfPartition)

    val flight_status_df_temp3 = toMap(flight_status_df_temp2, COLUMNLIST_FLIGHT_STATUS_DETAILS, "flight_status_details")

    flight_status_df_temp3.registerTempTable("flight_status_df_temp3_tab")

    val flight_status_details_df = sqlContext.sql("select flight_identifier,collect_list(flight_status_details) as flight_status_details  from flight_status_df_temp3_tab group by flight_identifier").coalesce(numberOfPartition)

    flight_status_details_df.registerTempTable("flight_status_details_df_tab")


    // pln_reg_details:

    val pln_reg_details_df_temp1 = sqlContext.sql("select flight_identifier, pln_reg_number, concat(msg_recorded_datetime,'.00',(ranked-1)) as msg_recorded_datetime from (select flight_identifier, pln_reg_number, msg_recorded_datetime, tibco_messageTime, ROW_NUMBER() over(partition by flight_identifier, msg_recorded_datetime order by tibco_messageTime) as ranked from (select flight_identifier, pln_reg_number, lag(pln_reg_number) over(partition by flight_identifier order by TransDateTime, tibco_messageTime) as prev_pln_reg_number, tibco_messageTime, ROW_NUMBER() over(partition by flight_identifier order by TransDateTime, tibco_messageTime) as tibco_ranked, translate(substr(trim(TransDateTime),1,19), 'T', ' ') as msg_recorded_datetime, tibco_messageTime FROM core_complex_cols_df_tab ) A where pln_reg_number <> coalesce(prev_pln_reg_number,0) or tibco_ranked = 1 ) B ")

    val pln_reg_details_df_temp2 = toMap(pln_reg_details_df_temp1, COLUMNLIST_PLN_REG_DETAILS, "pln_reg_details")

    pln_reg_details_df_temp2.registerTempTable("pln_reg_details_df_temp2_tab")

    val pln_reg_details_df = sqlContext.sql("select flight_identifier,collect_list(pln_reg_details) as pln_reg_details  from pln_reg_details_df_temp2_tab group by flight_identifier").coalesce(numberOfPartition)

    pln_reg_details_df.registerTempTable("pln_reg_details_df_tab")

    // flight_si_dep_remarks

    val flight_si_dep_remarks_temp1_df = sqlContext.sql("select flight_identifier, flight_si_remarks_dep, concat(msg_recorded_datetime,'.00',(ranked-1)) as msg_recorded_datetime from (select flight_identifier, flight_si_remarks_dep, msg_recorded_datetime, tibco_messageTime,  ROW_NUMBER() over(partition by flight_identifier, flight_si_remarks_dep, msg_recorded_datetime order by tibco_messageTime) as ranked from (select flight_identifier, flight_si_remarks_dep, translate(substr(trim(TransDateTime),1,19), 'T', ' ') as msg_recorded_datetime, tibco_messageTime from (select flight_identifier, flight_si_remarks_dep, TransDateTime, tibco_messageTime, ROW_NUMBER() over(partition by flight_identifier,flight_si_remarks_dep order by TransDateTime, tibco_messageTime) as tibco_ranked from core_complex_cols_df_tab where  trim(flight_si_remarks_dep) is not null and trim(flight_si_remarks_dep) <> 'null' and trim(flight_si_remarks_dep) <> '' ) A where tibco_ranked = 1 ) B ) C ")

    val flight_si_dep_remarks_temp2_df = toMap(flight_si_dep_remarks_temp1_df, COLUMNLIST_FLIGHT_SI_DEP_REMARKS, "flight_si_dep_remarks")

    flight_si_dep_remarks_temp2_df.registerTempTable("flight_si_dep_remarks_temp2_df_tab")

    val flight_si_dep_remarks_df = sqlContext.sql("select flight_identifier,collect_list(flight_si_dep_remarks) as flight_si_dep_remarks  from flight_si_dep_remarks_temp2_df_tab group by flight_identifier").coalesce(numberOfPartition)

    flight_si_dep_remarks_df.registerTempTable("flight_si_dep_remarks_df_tab")


    // flight_si_arr_remarks

    val flight_si_arr_remarks_temp1_df = sqlContext.sql(" select flight_identifier, flight_si_remarks_arr, concat(msg_recorded_datetime,'.00',(ranked-1)) as msg_recorded_datetime from (select flight_identifier, flight_si_remarks_arr, msg_recorded_datetime, tibco_messageTime, ROW_NUMBER() over(partition by flight_identifier, flight_si_remarks_arr, msg_recorded_datetime order by tibco_messageTime) as ranked from ( select flight_identifier, flight_si_remarks_arr, translate(substr(trim(TransDateTime),1,19), 'T', ' ') as msg_recorded_datetime, tibco_messageTime from (select flight_identifier, flight_si_remarks_arr, TransDateTime, tibco_messageTime, ROW_NUMBER() over(partition by flight_identifier,flight_si_remarks_arr order by TransDateTime, tibco_messageTime) as tibco_ranked from core_complex_cols_df_tab where  trim(flight_si_remarks_arr) is not null and trim(flight_si_remarks_arr) <> 'null' and trim(flight_si_remarks_arr) <> '' ) A where tibco_ranked = 1 ) B ) C ")

    val flight_si_arr_remarks_temp2_df = toMap(flight_si_arr_remarks_temp1_df, COLUMNLIST_FLIGHT_SI_ARR_REMARKS, "flight_si_arr_remarks")

    flight_si_arr_remarks_temp2_df.registerTempTable("flight_si_arr_remarks_temp2_df_tab")

    val flight_si_arr_remarks_df = sqlContext.sql("select flight_identifier,collect_list(flight_si_arr_remarks) as flight_si_arr_remarks  from flight_si_arr_remarks_temp2_df_tab group by flight_identifier").coalesce(numberOfPartition)

    flight_si_arr_remarks_df.registerTempTable("flight_si_arr_remarks_df_tab")

    // flight_remarks

    val flight_remarks_temp1_df = sqlContext.sql(" select flight_identifier, flight_remarks, concat(msg_recorded_datetime,'.00',(ranked-1)) as msg_recorded_datetime from ( select flight_identifier, flight_remarks, msg_recorded_datetime, tibco_messageTime, ROW_NUMBER() over(partition by flight_identifier, flight_remarks, msg_recorded_datetime order by tibco_messageTime) as ranked from (select flight_identifier, flight_remarks, translate(substr(trim(TransDateTime),1,19), 'T', ' ') as msg_recorded_datetime, tibco_messageTime from (select flight_identifier, flight_remarks, TransDateTime, tibco_messageTime, ROW_NUMBER() over(partition by flight_identifier,flight_remarks order by TransDateTime, tibco_messageTime) as tibco_ranked from core_complex_cols_df_tab where  trim(flight_remarks) is not null and trim(flight_remarks) <> 'null' and trim(flight_remarks) <> '' ) A where tibco_ranked = 1 ) B ) C  ")

    val flight_remarks_temp2_df = toMap(flight_remarks_temp1_df, COLUMNLIST_FLIGHT_REMARKS, "flight_remarks")

    flight_remarks_temp2_df.registerTempTable("flight_remarks_temp2_df_tab")

    val flight_remarks_df = sqlContext.sql("select flight_identifier,collect_list(flight_remarks) as flight_remarks  from flight_remarks_temp2_df_tab group by flight_identifier").coalesce(numberOfPartition)

    flight_remarks_df.registerTempTable("flight_remarks_df_tab")


    // flight_door_remarks

    val flight_door_remarks_temp1_df = sqlContext.sql("select flight_identifier, door_remark, concat(msg_recorded_datetime,'.00',(ranked-1)) as msg_recorded_datetime from ( select flight_identifier,  door_remark, msg_recorded_datetime, tibco_messageTime, ROW_NUMBER() over(partition by flight_identifier, door_remark, msg_recorded_datetime order by tibco_messageTime) as ranked FROM ( select flight_identifier,  DorRemark as door_remark, translate(substr(trim(TransDateTime),1,19), 'T', ' ') as msg_recorded_datetime, tibco_messageTime FROM (select flight_identifier, DorRemark, TransDateTime, tibco_messageTime, ROW_NUMBER() over(partition by flight_identifier,DorRemark order by TransDateTime, tibco_messageTime) as tibco_ranked from core_complex_cols_df_tab where  trim(DorRemark) is not null and trim(DorRemark) <> 'null' and trim(DorRemark) <> '' ) A where tibco_ranked = 1 ) B ) C ")

    val flight_door_remarks_temp2_df = toMap(flight_door_remarks_temp1_df, COLUMNLIST_FLIGHT_DOOR_REMARKS, "flight_door_remarks")

    flight_door_remarks_temp2_df.registerTempTable("flight_door_remarks_temp2_df_tab")

    val flight_door_remarks_df = sqlContext.sql("select flight_identifier,collect_list(flight_door_remarks) as flight_door_remarks  from flight_door_remarks_temp2_df_tab group by flight_identifier").coalesce(numberOfPartition)

    flight_door_remarks_df.registerTempTable("flight_door_remarks_df_tab")

    // -- flight_delay_details


    flight_delay_master_df.registerTempTable("flight_delay_master_df_tab")

    val flight_delay_details_temp1_df = sqlContext.sql("select flight_identifier, delay_code, delay_duration_mins, delay_type,delay_posted_datetime,delay_iata_station, concat(msg_recorded_datetime,'.000') as msg_recorded_datetime from (select *, max(delay_posted_datetime) over(partition by flight_identifier) as max_delay_posted_datetime from (select *, max(msg_recorded_datetime) over(partition by flight_identifier, delay_posted_datetime,delay_code ) as max_msg_recorded_datetime from (select concat(airline_code,flight_number,case when flight_suffix is null  or flight_suffix = 'null' then '' else flight_suffix end,flight_date,pln_dep_iata_station,initial_pln_arr_iata_station,flight_dep_number) as flight_identifier, delay_code, delay_duration_mins, delay_type, translate(substr(trim(delay_posted_datetime),1,19), 'T', ' ') as delay_posted_datetime  , case when delay_type = 'DEP' then dep_iata_station when delay_type = 'ARR' then arr_iata_station else null end as delay_iata_station, Audit_TransDateTime as msg_recorded_datetime from ( select LPAD(trim(FlightId.FltNum),4,'0') as flight_number  , trim(FlightId.FltDate.`_ATTRIBUTE_VALUE`) as flight_date  ,trim(FlightId.DepStn) as pln_dep_iata_station  , initial_pln_arr_iata_station , trim(Events[0].CxCd) as airline_code  ,case when trim(FlightId.DepNum) is null then null else trim(FlightId.DepNum) end as flight_dep_number, translate(substr(trim(Audit.TransDateTime),1,19), 'T', ' ') as Audit_TransDateTime, Events[0].DepStn as dep_iata_station, Events[0].ArrStn as arr_iata_station, trim(delay.PostedOn) as delay_posted_datetime, trim(delay.amount) as delay_duration_mins, trim(delay.code) as delay_code, trim(delay.type) as delay_type, case when trim(FlightId.FltSuffix) is null then null else trim(FlightId.FltSuffix) end as flight_suffix from core_dedup_df_tab lateral view explode(Delays.Delay) delay as delay ) A ) B ) C where msg_recorded_datetime = max_msg_recorded_datetime) D where delay_posted_datetime = max_delay_posted_datetime")

    flight_delay_details_temp1_df.dropDuplicates.registerTempTable("flight_delay_details_temp1_df_tab")

    val flight_delay_details_temp2_df = sqlContext.sql("select distinct flight_identifier, delay_code, delay_reason, dept_code as delay_dept_code,  delay_duration_mins, delay_iata_station, AIRPORT_ICAO_CODE as delay_icao_station, delay_type, delay_posted_datetime, msg_recorded_datetime from (select flight_identifier, t.delay_code, trim(description) as delay_reason, trim(dep_code) as dept_code, delay_duration_mins, delay_iata_station, delay_type as delay_type,delay_posted_datetime, msg_recorded_datetime from flight_delay_details_temp1_df_tab s left outer join flight_delay_master_df_tab t on t.delay_code = s.delay_code) s1 left outer join aircraft_country_region_df_tab  t1 on delay_iata_station = trim(AIRPORT_IATA_CODE)")

    val flight_delay_details_temp3_df = toMap(flight_delay_details_temp2_df, COLUMNLIST_FLIGHT_DELAY_DETAILS, "flight_delay_details")

    flight_delay_details_temp3_df.registerTempTable("flight_delay_details_temp3_df_tab")

    val flight_delay_details_df = sqlContext.sql("select flight_identifier,collect_list(flight_delay_details) as flight_delay_details  from flight_delay_details_temp3_df_tab group by flight_identifier").coalesce(numberOfPartition)

    flight_delay_details_df.registerTempTable("flight_delay_details_df_tab")


    // join all together and store

    val core_keys_df = sqlContext.sql("select distinct(flight_identifier) from core_simple_cols_df_tab")

    core_keys_df.registerTempTable("core_keys_df_tab")

    val coreMasterDF = sqlContext.sql("select simp_cols.*, comp_cols.pln_reg_details, comp_cols.flight_delay_details, comp_cols.flight_si_dep_remarks, comp_cols.flight_si_arr_remarks, comp_cols.flight_status_details, comp_cols.flight_remarks, comp_cols.flight_door_remarks, comp_cols.est_flight_out_datetime, comp_cols.est_flight_off_datetime, comp_cols.est_flight_in_datetime, comp_cols.est_flight_on_datetime from core_simple_master_tab simp_cols left outer join (select s10.*, t10.est_flight_on_datetime from (select s9.*, t9.est_flight_in_datetime from (select s8.*, t8.est_flight_off_datetime from (select s7.*, t7.est_flight_out_datetime from (select s6.*, t6.flight_door_remarks from(select s5.*, t5.flight_remarks from (select s4.*, t4.flight_si_arr_remarks from (select s3.*, t3.flight_si_dep_remarks from (select s2.*, t2.flight_delay_details from (select s1.*, t1.pln_reg_details from (select s.flight_identifier, t.flight_status_details from core_keys_df_tab s left outer join flight_status_details_df_tab t on s.flight_identifier = t.flight_identifier) s1 left outer join pln_reg_details_df_tab t1 on s1.flight_identifier = t1.flight_identifier) s2 left outer join flight_delay_details_df_tab t2 on s2.flight_identifier = t2.flight_identifier) s3 left outer join flight_si_dep_remarks_df_tab t3 on s3.flight_identifier = t3.flight_identifier) s4 left outer join flight_si_arr_remarks_df_tab t4 on s4.flight_identifier = t4.flight_identifier) s5 left outer join flight_remarks_df_tab t5 on s5.flight_identifier = t5.flight_identifier) s6 left outer join flight_door_remarks_df_tab t6 on s6.flight_identifier = t6.flight_identifier) s7 left outer join est_flight_out_datetime_df_tab t7 on s7.flight_identifier = t7.flight_identifier) s8 left outer join est_flight_off_datetime_df_tab t8 on s8.flight_identifier = t8.flight_identifier ) s9 left outer join est_flight_in_datetime_df_tab t9 on s9.flight_identifier = t9.flight_identifier ) s10 left outer join est_flight_on_datetime_df_tab t10 on s10.flight_identifier = t10.flight_identifier) comp_cols on simp_cols.flight_identifier = comp_cols.flight_identifier").repartition(numberOfPartition)

    coreMasterDF

  }
}